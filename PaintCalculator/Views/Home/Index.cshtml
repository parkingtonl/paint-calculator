@*@model PaintCalculator.Models.PaintModel  - Note cannot use this without a working database connection which is not really required      *@
@*Plan to use TDD Using Angular in due course*@
<form id="manageForm">
    @Html.AntiForgeryToken()
</form>
<div class="jumbotron text-center">
    <h1>Borwell Software Challenge - Paint Calculator</h1>
    <p>Solution by Lance Parkington 5/03/2020</p>
</div>

<div class="container">
    <div class="row">
        <div class="col-sm-12">
            <h3>Information</h3>
            <p>
                The software is written in Net Core 3.1 (all previous versions are end of life and out of support), using Bootstrap 4 and jQuery, and takes the dimensions (using metric units) of a room as input then outputs the following:
                <ul>
                    <li>Area of the floor.</li>
                    <li>Amount of paint required to paint the walls.</li>
                    <li>Volume of the room.</li>
                </ul>
                The amount of paint required to cover an area depends on the paint. An internal constant value is assumed which could be calibrated in a later version of the software. Furthe improvements include ability to choose imperial units.
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12">
            <h3>User Instructions</h3>
            <p>Simply enter the required length, width, and height and click Submit. To cancel, click Cancel which clears the data. If something goes wrong (eg invalid data), simply try again!</p>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-sm-3">
            <label for="Length">Length (m)</label>
            <input type="text" class="form-control" id="txt-length" maxLength="10">
            @*<input type="text" class="form-control" id="txt-length" value="@Model.Length" maxLength="10"> - Note cannot use this without DbContext*@
        </div>
        <div class="form-group col-sm-3">
            <label for="Width">Width (m)</label>
            <input type="text" class="form-control" id="txt-width" maxLength="10">
            @*<input type="text" class="form-control" id="txt-length" value="@Model.Width" maxLength="10"> - Note cannot use this without DbContext*@
        </div>
        <div class="form-group col-sm-3">
            <label for="Height">Height (m)</label>
            <input type="text" class="form-control" id="txt-height" maxLength="10">
            @*<input type="text" class="form-control" id="txt-length" value="@Model.Height" maxLength="10"> - Note cannot use this without DbContext*@
        </div>
        <div class="form-group col-sm-1">
            <label for="Cancel">&nbsp;</label>
            <button type="button" class="btn btn-primary form-control" id="btn-cancel">Cancel</button>
        </div>
        <div class="form-group col-sm-1">
            <label for="Submit">&nbsp;</label>
            <button type="button" class="btn btn-primary form-control" id="btn-submit">Submit</button>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col-sm-3">
            <label for="Area">Area</label>
            <input type="text" class="form-control" id="txt-area" maxLength="10" readonly>
        </div>
        <div class="form-group col-sm-3">
            <label for="Paint">Paint</label>
            <input type="text" class="form-control" id="txt-paint" maxLength="10" readonly>
        </div>
        <div class="form-group col-sm-3">
            <label for="Volume">Volume</label>
            <input type="text" class="form-control" id="txt-volume" maxLength="10" readonly>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        // These are Bootstrap 4 buttons and jQuery is used to wire up the click events using each button id
        $('#btn-submit').on('click', function (e) {
            var valid = validate();
            if (valid == true) {
                var length = $('#txt-length').val();
                var width = $('#txt-width').val();
                var height = $('#txt-height').val();
                var model = new Object();
                model.length = length;
                model.width = width;
                model.height = height;  
                model.area = 0;
                model.paint = 0;
                model.volume = 0;
                $.ajax({  
                    type: "POST",  
                    url: '@Url.Action("Calculate","Home")', // url of MVC Controller and method endpoint
                    data: JSON.stringify(model),  
                    contentType: "application/json; charset=utf-8",  
                    dataType: "json",
                    async: false,
                    success: function (data) {
                        handleResponse(data); // callback pattern should work
                    },  
                    failure: function (data) {  
                  
                    },  
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                            alert("Error Status: " + textStatus + " Error: " + errorThrown);
                    }
                });  
            }
        });

        $('#btn-cancel').on('click', function (e) { // reset text boxes to empty strings
            $('#txt-length').val('');
            $('#txt-width').val('');
            $('#txt-height').val('');
            $('#txt-area').val('');
            $('#txt-paint').val('');
            $('#txt-volume').val('');
        });

        function handleResponse(data) { // updates ui after server returns data
             $('#txt-area').val(data.Area);
             $('#txt-paint').val(data.Paint);
             $('#txt-volume').val(data.Volume);
        }

        function validate() { // validate input data are decimals
            var regexp = /^\d+\.?\d{0,3}$/; // This regex matches real number (optional decimal point) to 3 places
            var length = $('#txt-length').val().toString();
            var width = $('#txt-width').val().toString();
            var height = $('#txt-height').val().toString();
            var valid = false;
            if (regexp.test(length) == true) {
                if (regexp.test(width) == true) {
                    if (regexp.test(height) == true) {
                        valid = true;
                    }
                }
            }
            if (regexp.test(length) == false) {
                alert("Length must be decimal (up to 3 places)");
            }
            if (regexp.test(width) == false) {
                alert("Width must be decimal (up to 3 places)");
            }
              if (regexp.test(height) == false) {
                alert("Height must be decimal (up to 3 places)");
            }

            return valid;
        }
    </script>
}
